import bpy
import os

from fbloader import FBLoader
from config import Config, get_main_settings, get_operator
import settings
from utils.exif_reader import (read_exif_to_camera,auto_setup_camera_from_exif)
from utils.other import restore_ui_elements
from utils.materials import find_bpy_image_by_name
from utils.blendshapes import load_csv_animation_to_blendshapes

def exec():
    filepath="C:\\Users\\pc\\Desktop\\blender\\GettyImages-1092658864_hero-1024x575.jpg"
    FBLoader.load_model(0)
    head = settings.get_head(0)
    last_camnum = head.get_last_camnum()
    camera = FBLoader.add_new_camera_with_image(0,filepath)
    read_exif_to_camera(0, head.get_last_camnum(), filepath)
    camera.orientation = camera.exif.orientation


    for i, camera in enumerate(head.cameras):
        if i > last_camnum:
            auto_setup_camera_from_exif(camera)
            FBLoader.center_geo_camera_projection(0, i)

keentools_facebuilder.











Code below works:::








import bpy
import os

from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.config import Config, get_main_settings, get_operator
from keentools_facebuilder.settings import FBSceneSettings
from keentools_facebuilder.utils.exif_reader import (read_exif_to_camera,auto_setup_camera_from_exif)
from keentools_facebuilder.utils.other import restore_ui_elements
from keentools_facebuilder.utils.materials import find_bpy_image_by_name
from keentools_facebuilder.utils.blendshapes import load_csv_animation_to_blendshapes

class exec():
    headnum = 0
    def execute(self):
            
        filepath='C:\\Users\\pc\\Desktop\\blender\\GettyImages-1092658864_hero-1024x575.jpg'
        
        head = FBLoader.load_model(0)
        
        camera = FBLoader.add_new_camera_with_image(self.headnum,filepath)
    	camera = bpy.data.objects['fbCamera'].select_set(True)
	for area in bpy.context.screen.areas:
    		if area.type == 'VIEW_3D':
        	area.spaces.active.region_3d.view_perspective = 'CAMERA'
        	break
    
	bpy.ops.keentools_facebuilder.pickmode_starter(headnum=0, camnum=0)

if __name__ =='__main__':
    instance= exec()
    instance.execute()









-0.5






import logging
import bpy

from keentools_facebuilder.config import Config, ErrorType, get_main_settings, get_operator
from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.utils import coords
from keentools_facebuilder.utils.focal_length import configure_focal_mode_and_fixes
from keentools_facebuilder.utils.manipulate import push_neutral_head_in_undo_history

def get_detected_faces():
    global _DETECTED_FACES
    return _DETECTED_FACES

def _set_detected_faces(faces_info):
    global _DETECTED_FACES
    _DETECTED_FACES = faces_info

def _get_detected_faces_rectangles():
    faces = get_detected_faces()
    rects = []
    for i, face in enumerate(faces):
        x1, y1 = face.xy_min
        x2, y2 = face.xy_max
        if x2 < x1:
            x1, x2 = x2, x1
        if y2 < y1:
            y1, y2 = y2, y1
        rects.append((x1, y1, x2, y2, i))
    return rects

def init_detected_faces(fb, headnum, camnum):
    settings = get_main_settings()
    head = settings.get_head(headnum)
    camera = head.get_camera(camnum)
    img = camera.np_image()
    fb.set_use_emotions(head.should_use_emotions())
    _set_detected_faces(fb.detect_faces(img))

    return img

def sort_detected_faces():
    faces = get_detected_faces()
    rects = _get_detected_faces_rectangles()
    rects.sort(key=lambda x: x[0])  # order by x1
    _set_detected_faces([faces[x[4]] for x in rects])
    return rects

class PickModeStarter():

    headnum=0
    camnum=0

    def action(self):

        FBLoader.load_model(self.headnum)
        fb = FBLoader.get_builder()
        img = init_detected_faces(fb, self.headnum, self.camnum)
        h, w, _ = img.shape
        rects = sort_detected_faces()
        vp = FBLoader.viewport()
        rectangler = vp.rectangler()
        rectangler.clear_rectangles()

        if len(rects) > 1: 
            for x1, y1, x2, y2, _ in rects:
                rectangler.add_rectangle(x1, y1, x2, y2, w, h,Config.regular_rectangle_color)
                
                

if __name__=='__main__':
    x = PickModeStarter()
    x.action()




-----------------------------------------------------------------------------------------

import bpy
import os

from bpy_extras.io_utils import ImportHelper, ExportHelper
from bpy.types import Operator

from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.config import Config, get_main_settings, get_operator

from keentools_facebuilder.utils.exif_reader import (read_exif_to_camera,auto_setup_camera_from_exif)
from keentools_facebuilder.utils.other import restore_ui_elements
from keentools_facebuilder.utils.materials import find_bpy_image_by_name
from keentools_facebuilder.utils.blendshapes import load_csv_animation_to_blendshapes



class lol():
    headnum=0
    camnum=0
    directory='C:\\Users\\pc\\Downloads\\dd\\blender\\'
    name='GettyImages-1092658864_hero-1024x575.jpg'
    def execute(self):
        restore_ui_elements()
        settings = get_main_settings()
        FBLoader.load_model(self.headnum)  
        head = settings.get_head(self.headnum)
        last_camnum = head.get_last_camnum()


        try:
            filepath = os.path.join(self.directory, self.name)
            camera = FBLoader.add_new_camera_with_image(self.headnum,filepath)
            read_exif_to_camera(self.headnum, head.get_last_camnum(), filepath)
            camera.orientation = camera.exif.orientation

        except RuntimeError as ex:
            return "error1"

        for i, camera in enumerate(head.cameras):
            if i > last_camnum:
                auto_setup_camera_from_exif(camera)
                FBLoader.center_geo_camera_projection(self.headnum, i)

        FBLoader.save_only(self.headnum)
        
        camera2 = head.get_camera(self.camnum)
        camera2.switch_to_camera(camera.camobj)
        camera2.show_background_image()

        bpy.context.view_layer.objects.active = head.headobj

        copy_exif_parameters_from_camera_to_head(camera, head)
        update_exif_sizes_message(self.headnum, camera.cam_image)

        # Auto Call PinMode
        draw_op = get_operator(Config.fb_pinmode_idname)
        

if __name__ == '__main__':
    x=lol()
    x.execute()


-----------------------------------------------------------------------------

import logging
import bpy

from keentools_facebuilder.config import Config, ErrorType, get_main_settings, get_operator
from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.utils import coords
from keentools_facebuilder.utils.focal_length import configure_focal_mode_and_fixes
from keentools_facebuilder.utils.manipulate import push_neutral_head_in_undo_history

def get_detected_faces():
    global _DETECTED_FACES
    return _DETECTED_FACES

def _set_detected_faces(faces_info):
    global _DETECTED_FACES
    _DETECTED_FACES = faces_info

def _get_detected_faces_rectangles():
    faces = get_detected_faces()
    rects = []
    for i, face in enumerate(faces):
        x1, y1 = face.xy_min
        x2, y2 = face.xy_max
        if x2 < x1:
            x1, x2 = x2, x1
        if y2 < y1:
            y1, y2 = y2, y1
        rects.append((x1, y1, x2, y2, i))
    return rects

def init_detected_faces(fb, headnum, camnum):
    settings = get_main_settings()
    head = settings.get_head(headnum)
    camera = head.get_camera(camnum)
    img = camera.np_image()
    fb.set_use_emotions(head.should_use_emotions())
    _set_detected_faces(fb.detect_faces(img))

    return img

def sort_detected_faces():
    faces = get_detected_faces()
    rects = _get_detected_faces_rectangles()
    rects.sort(key=lambda x: x[0])  # order by x1
    _set_detected_faces([faces[x[4]] for x in rects])
    return rects

class PickModeStarter():

    headnum=0
    camnum=0

    def action(self):

        FBLoader.load_model(self.headnum)
        fb = FBLoader.get_builder()
        img = init_detected_faces(fb, self.headnum, self.camnum)
        h, w, _ = img.shape
        rects = sort_detected_faces()
        vp = FBLoader.viewport()
        rectangler = vp.rectangler()
        rectangler.clear_rectangles()
        

        if len(rects) > 1: 
            for x1, y1, x2, y2, _ in rects:
                rectangler.add_rectangle(x1, y1, x2, y2, w, h,Config.regular_rectangle_color)
        elif len(rects) == 1:        
            y=pickmode()
            y.execute()         




if __name__=='__main__':
    x = PickModeStarter()
    x.action()



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



import bpy

from keentools_facebuilder.config import Config, ErrorType, get_main_settings, get_operator
from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.utils import coords
from keentools_facebuilder.utils.focal_length import configure_focal_mode_and_fixes
from keentools_facebuilder.utils.manipulate import push_neutral_head_in_undo_history

def get_detected_faces():
    global _DETECTED_FACES
    return _DETECTED_FACES

def _set_detected_faces(faces_info):
    global _DETECTED_FACES
    _DETECTED_FACES = faces_info

def _get_detected_faces_rectangles():
    faces = get_detected_faces()
    rects = []
    for i, face in enumerate(faces):
        x1, y1 = face.xy_min
        x2, y2 = face.xy_max
        if x2 < x1:
            x1, x2 = x2, x1
        if y2 < y1:
            y1, y2 = y2, y1
        rects.append((x1, y1, x2, y2, i))
    return rects

def init_detected_faces(fb, headnum, camnum):
    settings = get_main_settings()
    head = settings.get_head(headnum)
    camera = head.get_camera(camnum)
    img = camera.np_image()
    fb.set_use_emotions(head.should_use_emotions())
    _set_detected_faces(fb.detect_faces(img))

    return img

def sort_detected_faces():
    faces = get_detected_faces()
    rects = _get_detected_faces_rectangles()
    rects.sort(key=lambda x: x[0])  # order by x1
    _set_detected_faces([faces[x[4]] for x in rects])
    return rects

def _add_pins_to_face(headnum, camnum, rectangle_index):
    fb = FBLoader.get_builder()
    faces = get_detected_faces()

    settings = get_main_settings()
    head = settings.get_head(headnum)
    camera = head.get_camera(camnum)
    kid = camera.get_keyframe()

    fb.set_use_emotions(head.should_use_emotions())
    configure_focal_mode_and_fixes(fb, head)
    result_flag = fb.detect_face_pose(kid, faces[rectangle_index])
    if result_flag:
        fb.remove_pins(kid)
        fb.add_preset_pins(kid)
        print("added")
    else:
        print("failed")

    FBLoader.update_pins_count(headnum, camnum)
    FBLoader.update_all_camera_positions(headnum)
    FBLoader.update_all_camera_focals(headnum)
    FBLoader.fb_redraw(headnum, camnum)

    FBLoader.save_only(headnum)
    history_name = 'Add face auto-pins' if result_flag else 'No auto-pins'
    push_neutral_head_in_undo_history(head, kid, history_name)
    return result_flag

class exec():
    headnum=0
    camnum=0

    def action(self):

        FBLoader.load_model(self.headnum)
        fb = FBLoader.get_builder()

        if not fb.is_face_detector_available():
            print('Face detector is not available')
            return 

        img = init_detected_faces(fb, self.headnum, self.camnum)
        h, w, _ = img.shape
        rects = sort_detected_faces()

        vp = FBLoader.viewport()
        rectangler = vp.rectangler()
        rectangler.clear_rectangles()

        if len(rects) > 1:
            for x1, y1, x2, y2, _ in rects:
                rectangler.add_rectangle(x1, y1, x2, y2, w, h,Config.regular_rectangle_color)
            if invoked:
                op = get_operator(Config.fb_pickmode_idname)
                op('INVOKE_DEFAULT', headnum=self.headnum, camnum=self.camnum)
        elif len(rects) == 1:
            if not _add_pins_to_face(self.headnum, self.camnum,rectangle_index=0):
                print("A face wasn't detected and pinned")
                return  
            else:
                print("A face was detected and pinned")
                return

if __name__=='__main__':
    x = exec()
    x.action()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
import bpy
import os

from bpy_extras.io_utils import ImportHelper, ExportHelper
from bpy.types import Operator

from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.config import Config, get_main_settings, get_operator

from keentools_facebuilder.utils.exif_reader import (read_exif_to_camera,auto_setup_camera_from_exif)
from keentools_facebuilder.utils.other import restore_ui_elements
from keentools_facebuilder.utils.materials import find_bpy_image_by_name
from keentools_facebuilder.utils.blendshapes import load_csv_animation_to_blendshapes



class lol():
    headnum=0
    camnum=0
    directory='C:\\Users\\pc\\Downloads\\dd\\blender\\'
    name='GettyImages-1092658864_hero-1024x575.jpg'
    def execute(self):

        settings = get_main_settings()
        FBLoader.load_model(self.headnum)  
        head = settings.get_head(self.headnum)
        last_camnum = head.get_last_camnum()


        try:
            filepath = os.path.join(self.directory, self.name)
            camera = FBLoader.add_new_camera_with_image(self.headnum,filepath)
            read_exif_to_camera(self.headnum, head.get_last_camnum(), filepath)
            camera.orientation = camera.exif.orientation

        except RuntimeError as ex:
            return "error1"

        for i, camera in enumerate(head.cameras):
            if i > last_camnum:
                auto_setup_camera_from_exif(camera)
                FBLoader.center_geo_camera_projection(self.headnum, i)

        FBLoader.save_only(self.headnum)

if __name__ == '__main__':
    x=lol()
    x.execute() 
---------------------------------------------------------------------------------------------------------------------------------------------------------

import bpy
import os

from keentools_facebuilder.fbloader import FBLoader
from keentools_facebuilder.config import Config, get_main_settings, get_operator
from keentools_facebuilder.settings import FBSceneSettings
from keentools_facebuilder.utils.exif_reader import (read_exif_to_camera,auto_setup_camera_from_exif)
from keentools_facebuilder.utils.other import restore_ui_elements
from keentools_facebuilder.utils.materials import find_bpy_image_by_name
from keentools_facebuilder.utils import manipulate, coords, cameras
from keentools_facebuilder.utils.blendshapes import load_csv_animation_to_blendshapes
from keentools_facebuilder.utils.focal_length import update_camera_focal
from keentools_facebuilder.utils.other import FBStopShaderTimer, force_ui_redraw, hide_ui_elements

from uuid import uuid4

class exec():
    headnum = 0
    

class exec():
    headnum = 0
    def create(self):
        #importing the obj
        file_loc = 'C:\\Users\\pc\\Downloads\\dd\\blender\\untitled.obj'
        imported_object = bpy.ops.import_scene.obj(filepath=file_loc)
        obj_object = bpy.context.selected_objects[0]


        #selecting the object
        behindFace = bpy.data.objects["FaceBuilderHead_FaceBuilderHead_mesh"].select_set(True)

        #creation of material
        mat = bpy.data.materials["(null)"]

        #checking the nodes are true
        mat.use_nodes = True
        nodes = mat.node_tree.nodes

        #using the nodes to change the value of colors
        nodes["Principled BSDF"].inputs[0].default_value = (0.222, 0.9, 0.8, 1)

        #assigning the object to the material that was created
        #ob = bpy.context.object.data.materials.append(mat)

        #adding the face into the blender
        bpy.ops.keentools_facebuilder.add_head()
        #saving the face into blender
        face = bpy.context.active_object


        #removing the scalp and neck 
        bpy.context.scene.keentools_fb_settings.heads[0].masks[6] = False
        bpy.context.scene.keentools_fb_settings.heads[0].masks[4] = False
        bpy.context.scene.keentools_fb_settings.heads[0].masks[0] = False


    
    
    
    
    
    
  
    def execute(self):
            
        filepath='C:\\Users\\pc\\Downloads\\dd\\blender\\GettyImages-1092658864_hero-1024x575.jpg'
        
        head = FBLoader.load_model(0)
        camera = FBLoader.add_new_camera_with_image(self.headnum,filepath)
        camera = bpy.data.objects['fbCamera'].select_set(True)
        
        
      
       
        settings = get_main_settings()

        if not settings.check_heads_and_cams():
            self._fix_heads_with_warning()
            return("err1")
        head = settings.get_head(self.headnum)
        headobj = head.headobj
        first_start = True

        vp = FBLoader.viewport()
        # Stopped shaders means that we need to restart pinmode
        if not vp.wireframer().is_working():
            settings.pinmode = False

        if settings.wrong_pinmode_id():
            settings.pinmode = False

        # We have to fix last operation if we are in Pinmode
        if settings.pinmode and \
                settings.current_headnum >= 0 and settings.current_camnum >= 0:

            FBLoader.save_pinmode_state(settings.current_headnum)
            first_start = False
        else:
            FBLoader.update_cameras_from_old_version(self.headnum)

        settings.current_headnum = 0
        settings.current_camnum = 0
        settings.pinmode = True

        camera = head.get_camera(settings.current_camnum)
        camera.update_scene_frame_size()
        camera.update_background_image_scale()
        kid = camera.get_keyframe()

        # Start working with current model
        FBLoader.load_model(settings.current_headnum)



        fb = FBLoader.get_builder()



        try:
            FBLoader.place_camera(settings.current_headnum,
                                  settings.current_camnum)
        except Exception:
            return {'err2'}

        FBLoader.load_pins(settings.current_headnum, settings.current_camnum)
        coords.update_head_mesh(settings, FBLoader.get_builder(), head)

        update_camera_focal(camera, fb)

        # Hide geometry
        headobj.hide_set(True)
        cameras.hide_other_cameras(settings.current_headnum,
                                   settings.current_camnum)

        if first_start:
            hide_ui_elements()


            self.pinmode_id = str(uuid4())
            settings.pinmode_id = self.pinmode_id
            FBStopShaderTimer.start(self.pinmode_id)
        else:
            self._init_wireframer_colors(settings.overall_opacity)

        vp.update_surface_points(FBLoader.get_builder(), headobj, kid)
        manipulate.push_neutral_head_in_undo_history(head, kid,
                                                     'Pin Mode Start.')
        if not first_start:
            return {'FINISHED'}


        return {"RUNNING_MODAL"}

        bpy.ops.keentools_facebuilder.pickmode_starter(headnum=0, camnum=0)


        #expanding the edges
        bpy.context.scene.keentools_fb_settings.tex_uv_expand_percents = 10

        #creating the texturing
        bpy.ops.keentools_facebuilder.bake_tex(headnum=0)

        bpy.ops.keentools_facebuilder.tex_selector(headnum=0)
        


if __name__ =='__main__':
    instance= exec()
    instance.create()
    instance.execute()
